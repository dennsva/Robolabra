package robotti;

import lejos.nxt.Button;
import lejos.nxt.ButtonListener;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.SensorPort;
import lejos.nxt.SensorPortListener;
import lejos.nxt.TouchSensor;
import lejos.util.Delay;

public class Piirturi {

	//En löytänyt tapaa poistaa listeneria moottorista A, joten deaktivoin sen booleanin moottoriA avulla.
	private boolean moottoriA;
	
	//Kynä on paperissa, kun moottorin A tila on rajaA. Tämä säädetään metodissa asetaKorkeus.
	private int rajaA;
	
	//moottori B liikuttaa kynää x-akselin suuntaisesti välillä [0, rajaB]
	private final int rajaB;
	//moottori C liikuttaa kynää y-akselin suuntaisesti välillä [0, rajaC]
	private final int rajaC;
	private final int vakionopeus;
	
	public Piirturi(int rajaB, int rajaC, int vakionopeus) {
		this.rajaB = rajaB;
		this.rajaC = rajaC;
		this.vakionopeus = vakionopeus;
	}
	
	public Piirturi() {
		this.rajaB = 850;
		this.rajaC = 500;
		this.vakionopeus = 90;
	}
	
	/**Antaa mahdollisuuden ohjata piirturia suoraan nappien avulla.*/
	public void vapaaPiirtaminen() {
		vapaaPiirtaminen(true);
	}
	
	private void vapaaPiirtaminen(final boolean rajoitettu) {
		//metodin parametrit ovat testausta varten!
		
		asetaNopeudet(vakionopeus);
		
		if (rajoitettu) {
			System.out.println("Nyt voit piirtaa");
			System.out.println("vapaasti! Esc");
			System.out.println("lopettaa.");
		} else {
			System.out.println("Aseta piirturi");
			System.out.println("kulmaan, jossa");
			System.out.println("NXT on ja paina");
			System.out.println("enter.");
		}
		
		//kynän siirtäminen vasemmalle
		Button.LEFT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (rajoitettu) {
					Motor.B.rotateTo(rajaB, true);
				} else {
					Motor.B.forward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.B.stop();
			}
		});
		
		//kynän siirtäminen oikealle
		Button.RIGHT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (rajoitettu) {
					Motor.B.rotateTo(0, true);
				} else {
					Motor.B.backward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.B.stop();
			}
		});
		
		//kynän siirtäminen eteen
		SensorPort.S1.addSensorPortListener(new SensorPortListener() {
			public void stateChanged(SensorPort p, int i, int f) {
				TouchSensor sensor = new TouchSensor(p);
				if (sensor.isPressed()) {
					if (rajoitettu) {
						Motor.C.rotateTo(rajaC, true);
					} else {
						Motor.C.forward();
					}
				} else {
					Motor.C.stop();
				}
			}
		});
		
		//kynän siirtäminen taakse
		SensorPort.S2.addSensorPortListener(new SensorPortListener() {
			public void stateChanged(SensorPort p, int i, int f) {
				TouchSensor sensor = new TouchSensor(p);
				if (sensor.isPressed()) {
					if (rajoitettu) {
						Motor.C.rotateTo(0, true);
					} else {
						Motor.C.backward();
					}
				} else {
					Motor.C.stop();
				}
			}
		});
		
		Button.ESCAPE.waitForPressAndRelease();
	}
	
	/**Antaa kynan x-koordinaatin valilla [0, 850].*/
	public int getX() {
		return Motor.B.getPosition();
	}
	
	/**Antaa kynan y-koordinaatin valilla [0, 500].*/
	public int getY() {
		return Motor.C.getPosition();
	}
	
	/**Palauttaa piirturin ja annetun pisteen valisen etaisyyden.*/
	public double etaisyysPisteeseen(int x, int y) {
		return Math.sqrt(Math.pow(getX() - x, 2) + Math.pow(getY() - y, 2));
	}
	
	/**Palauttaa true jos ja vain jos piste (x, y) on ruudukossa.*/
	public boolean ruudukossa(int x, int y) {
		if (0 <= x && x <= rajaB
				&& 0 <= y && y <= rajaC) return true;
		return false;
	}

	/**Nostaa kynan ja siirtaa piirturin oletusasentoon.*/
	public void nollaaRobotti() {
		nostaKyna();
		asetaNopeudet(vakionopeus);
		liikuta(0, 0);
	}
	
	/**Laskee kynan paperiin.*/
	public void laskeKyna() {
		Motor.A.rotateTo(rajaA);
	}
	
	/**Nostaa kynan paperista.*/
	public void nostaKyna() {
		Motor.A.rotateTo(0);
	}
	
	/**Liikuttaa piirturia suoraan parametrien maaraamaan pisteeseen. X valilla [0, 850] ja Y valilla [0, 500].*/
	public void liikuta(int loppuX, int loppuY) {
		if (!ruudukossa(loppuX, loppuY)) return;
		
		//liikutaan lyhintä reittiä
		int leveys = Math.abs(loppuX - getX());
		int korkeus = Math.abs(loppuY - getY());
		float suurin = (float) Math.max(korkeus, leveys);
		if (suurin == 0) return;
		
		//moottoreiden pitää liikkua eri pituiset osuudet yhtä nopeasti! maksiminopeus vakionopeus.
		//System.out.println((vakionopeus * leveys) / suurin);
		//System.out.println((vakionopeus * korkeus) / suurin);
		asetaNopeudet((vakionopeus * leveys) / suurin, (vakionopeus * korkeus) / suurin);
		
		//liikutaan
		Motor.B.rotateTo(loppuX, true);
		Motor.C.rotateTo(loppuY);
		Motor.B.rotateTo(loppuX);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrin molempiin suuntiin.*/
	public void asetaNopeudet(float nopeus) {
		asetaNopeudet(nopeus, nopeus);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrin molempiin suuntiin.*/
	public void asetaNopeudet(int nopeus) {
		asetaNopeudet(nopeus, nopeus);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrien mukaiseksi.*/
	public void asetaNopeudet(float nopeusX, float nopeusY) {
		Motor.B.setSpeed(nopeusX);
		Motor.C.setSpeed(nopeusY);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrien mukaiseksi.*/
	public void asetaNopeudet(int nopeusX, int nopeusY) {
		Motor.B.setSpeed(nopeusX);
		Motor.C.setSpeed(nopeusY);
	}
	
	/**Antaa kayttajalle mahdollisuuden hienosaataa kynan korkeus.*/
	public void asetaKorkeus() {
		asetaKorkeus(true);
	}
	
	private void asetaKorkeus(boolean nostetaan) {
		
		moottoriA = true;
		
		//riville mahtuu 16 merkkiä
		if (nostetaan) {
			System.out.println("Aseta kynan");
			System.out.println("korkeus ja paina");
			System.out.println("enter.");
			System.out.println("<- alas  ylos ->");
		} else {
			System.out.println("Nollaa kyna ja");
			System.out.println("paina enter.");
		}
		
		
		//kynan siirtäminen alaspäin
		Button.LEFT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (moottoriA) {
					Motor.A.forward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.A.stop();
			}
		});
		
		//kynan siirtäminen ylöspäin
		Button.RIGHT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (moottoriA) {
					Motor.A.backward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.A.stop();
			}
		});
		
		Button.ENTER.waitForPressAndRelease();
		moottoriA = false;
		rajaA = Motor.A.getPosition();
		LCD.clear();
		if (nostetaan) nostaKyna();
	}
	
	/**Piirtaa suoran viivan parametrien maaraamien pisteiden valille.*/
	public void piirraViiva(int lahtoX, int lahtoY, int loppuX, int loppuY) {
		if (!ruudukossa(lahtoX, lahtoY)) return;
		if (!ruudukossa(loppuX, loppuY)) return;
		
		//aloitetaan lähimmasta päästa
		if (etaisyysPisteeseen(loppuX, loppuY) < etaisyysPisteeseen(lahtoX, lahtoY)) {
			piirraViiva(loppuX, loppuY, lahtoX, lahtoY);
			return;
		}
		
		if (etaisyysPisteeseen(lahtoX, lahtoY) > 0) {
			nostaKyna();
			liikuta(lahtoX, lahtoY);
		}
		laskeKyna();
		liikuta(loppuX, loppuY);
	}
	
	/**Piirtaa annetun numeron ruutuun, jonka maaraa koordinaatit (x1, y1) ja (x2, y2).*/
	public void piirraNumero(int numero, int x1, int y1, int x2, int y2) {
		if (!ruudukossa(x1, y1)) return;
		if (!ruudukossa(x2, y2)) return;
		
		if (numero < 0 || numero > 9) return;
		
		//vaihdetaan x:ät, sillä x-akseli menee oikealta vasemmalle
		int vanhax1 = x1;
		x1 = x2;
		x2 = vanhax1;

		int ykeski = (y1 + y2) / 2;
		
		if (numero == 0) {
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, y1);
			piirraViiva(x2, y1, x1, y1);
			piirraViiva(x1, y1, x1, y2);
		} else if (numero == 1) {
			piirraViiva(x2, y1, x2, y2);
		} else if (numero == 2) {
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, ykeski);
			piirraViiva(x2, ykeski, x1, ykeski);
			piirraViiva(x1, ykeski, x1, y1);
			piirraViiva(x1, y1, x2, y1);
		} else if (numero == 3) {
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, y1);
			piirraViiva(x2, y1, x1, y1);
			piirraViiva(x1, ykeski, x2, ykeski);
		} else if (numero == 4) {
			piirraViiva(x1, y2, x1, ykeski);
			piirraViiva(x1, ykeski, x2, ykeski);
			piirraViiva(x2, y2, x2, y1);
		} else if (numero == 5) {
			piirraViiva(x2, y2, x1, y2);
			piirraViiva(x1, y2, x1, ykeski);
			piirraViiva(x1, ykeski, x2, ykeski);
			piirraViiva(x2, ykeski, x2, y1);
			piirraViiva(x2, y1, x1, y1);
		} else if (numero == 6) {
			piirraViiva(x1, ykeski, x2, ykeski);
			piirraViiva(x2, ykeski, x2, y1);
			piirraViiva(x2, y1, x1, y1);
			piirraViiva(x1, y1, x1, y2);
			piirraViiva(x1, y2, x2, y2);
		} else if (numero == 7) {
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, y1);
		} else if (numero == 8) {
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, y1);
			piirraViiva(x2, y1, x1, y1);
			piirraViiva(x1, y1, x1, y2);
			piirraViiva(x1, ykeski, x2, ykeski);
		} else if (numero == 9) {
			piirraViiva(x2, ykeski, x1, ykeski);
			piirraViiva(x1, ykeski, x1, y2);
			piirraViiva(x1, y2, x2, y2);
			piirraViiva(x2, y2, x2, y1);
			piirraViiva(x2, y1, x1, y1);
		}
	}
	
	/**Tarjoaa toiminnallisuuden, jolla väärään paikkaan joutuneen piirturin voi nollata.*/
	public void manuaalinenNollaus() {
		asetaKorkeus(false);
		vapaaPiirtaminen(false);
	}
	
}

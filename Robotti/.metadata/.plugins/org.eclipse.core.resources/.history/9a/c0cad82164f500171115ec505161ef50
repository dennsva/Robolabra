package robotti;

import lejos.nxt.*;

/**
 * Example leJOS Project with an ant build file
 *
 */

public class Robotti {

	//En löytänyt tapaa poistaa listeneria moottorista A, joten deaktivoin sen booleanin moottoriA avulla.
	static boolean moottoriA;
	
	//paperi on korkeudella rajaA, tämä asetetaan metodissa asetaKorkeus
	static int rajaA;
	
	//B range [0, 850]
	//C range [0, 500]
	static final int rajaB = 850;
	static final int rajaC = 500;
	
	//moottoreiden B ja C vakionopeudeksi 90
	static final int vakionopeus = 90;
	
	//alas = A forward
	//vasemmalle = B forward
	//taakse = C forward
	
	//lähtöpaikka NXT:n vieressa!
	
	public static void main(String[] args) {	
		//asetaKorkeus();
		
		//vapaaPiirtaminen(false);
		//piirraViiva(100, 100, 700, 400);
		
		//nollaaRobotti();
		
		Piirturi piirturi = new Piirturi();
		piirturi.asetaKorkeus();
		piirturi.vapaaPiirtaminen();
		piirturi.nollaaRobotti();
	}
	
	/**Antaa mahdollisuuden ohjata piirturia suoraan nappien avulla.*/
	public static void vapaaPiirtaminen() {
		vapaaPiirtaminen(true);
	}
	
	private static void vapaaPiirtaminen(final boolean rajoitettu) {
		//metodin parametrit ovat testausta varten!
		
		asetaKorkeus();
		asetaNopeudet(vakionopeus);
		
		System.out.println("Nyt voit piirtaa");
		System.out.println("vapaasti! Esc");
		System.out.println("lopettaa.");
		
		//kynän siirtäminen vasemmalle
		Button.LEFT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (rajoitettu) {
					Motor.B.rotateTo(rajaB, true);
				} else {
					Motor.B.forward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.B.stop();
			}
		});
		
		//kynän siirtäminen oikealle
		Button.RIGHT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (rajoitettu) {
					Motor.B.rotateTo(0, true);
				} else {
					Motor.B.backward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.B.stop();
			}
		});
		
		//kynän siirtäminen eteen
		SensorPort.S1.addSensorPortListener(new SensorPortListener() {
			public void stateChanged(SensorPort p, int i, int f) {
				TouchSensor sensor = new TouchSensor(p);
				if (sensor.isPressed()) {
					if (rajoitettu) {
						Motor.C.rotateTo(rajaC, true);
					} else {
						Motor.C.forward();
					}
				} else {
					Motor.C.stop();
				}
			}
		});
		
		//kynän siirtäminen taakse
		SensorPort.S2.addSensorPortListener(new SensorPortListener() {
			public void stateChanged(SensorPort p, int i, int f) {
				TouchSensor sensor = new TouchSensor(p);
				if (sensor.isPressed()) {
					if (rajoitettu) {
						Motor.C.rotateTo(0, true);
					} else {
						Motor.C.backward();
					}
				} else {
					Motor.C.stop();
				}
			}
		});
		
		Button.ESCAPE.waitForPressAndRelease();
	}
	
	/**Antaa kynan x-koordinaatin valilla [0, 850].*/
	public static int getX() {
		return Motor.B.getPosition();
	}
	
	/**Antaa kynan y-koordinaatin valilla [0, 500].*/
	public static int getY() {
		return Motor.C.getPosition();
	}
	
	private static double etaisyysPisteeseen(int x, int y) {
		return Math.sqrt(Math.pow(getX() - x, 2) + Math.pow(getY() - y, 2));
	}

	/**Nostaa kynan ja siirtaa piirturin oletusasentoon.*/
	public static void nollaaRobotti() {
		nostaKyna();
		asetaNopeudet(vakionopeus);
		liikuta(0, 0);
	}
	
	/**Laskee kynan paperiin.*/
	public static void laskeKyna() {
		Motor.A.rotateTo(rajaA);
	}
	
	/**Nostaa kynan paperista.*/
	public static void nostaKyna() {
		Motor.A.rotateTo(0);
	}
	
	/**Liikuttaa piirturia parametrien maaraamaan pisteeseen. X valilla [0, 850] ja Y valilla [0, 500].*/
	public static void liikuta(int loppuX, int loppuY) {
		if (loppuX < 0 || loppuX > rajaB) return;
		if (loppuY < 0 || loppuY > rajaC) return;
		
		Motor.B.rotateTo(loppuX, true);
		Motor.C.rotateTo(loppuY);
		Motor.B.rotateTo(loppuX);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrin molempiin suuntiin.*/
	public static void asetaNopeudet(int nopeus) {
		asetaNopeudet(nopeus, nopeus);
	}
	
	/**Asettaa kynan liikkumisnopeuden parametrien mukaiseksi.*/
	public static void asetaNopeudet(int nopeusX, int nopeusY) {
		Motor.B.setSpeed(nopeusX);
		Motor.C.setSpeed(nopeusY);
	}
	
	/**Antaa kayttajalle mahdollisuuden hienosaataa kynan korkeus.*/
	public static void asetaKorkeus() {
		
		moottoriA = true;
		
		//riville mahtuu 16 merkkiä
		System.out.println("Aseta kynan");
		System.out.println("korkeus ja paina");
		System.out.println("enter");
		System.out.println("<- alas  ylos ->");
		
		//kynan siirtäminen alaspäin
		Button.LEFT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (moottoriA) {
					Motor.A.forward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.A.stop();
			}
		});
		
		//kynan siirtäminen ylöspäin
		Button.RIGHT.addButtonListener(new ButtonListener() {
			public void buttonPressed(Button b) {
				if (moottoriA) {
					Motor.A.backward();
				}
			}
			
			public void buttonReleased(Button b) {
				Motor.A.stop();
			}
		});
		
		Button.ENTER.waitForPressAndRelease();
		moottoriA = false;
		rajaA = Motor.A.getPosition();
		LCD.clear();
	}
	
	/**Piirtaa suoran viivan parametrien maaraamien pisteiden valille.*/
	public static void piirraViiva(int lahtoX, int lahtoY, int loppuX, int loppuY) {
		
		//aloitetaan lähimmasta päästa
		if (etaisyysPisteeseen(loppuX, loppuY) < etaisyysPisteeseen(lahtoX, lahtoY)) {
			piirraViiva(loppuX, loppuY, lahtoX, lahtoY);
			return;
		}
		
		asetaNopeudet(vakionopeus);
		liikuta(lahtoX, lahtoY);
		
		//moottoreiden pitää liikkua eri pituiset osuudet yhtä nopeasti!
		int leveys = loppuX - lahtoX;
		int korkeus = loppuY - lahtoY;
		int suurin = Math.max(korkeus, leveys);
		asetaNopeudet((90 * leveys) / suurin, (90 * korkeus) / suurin);

		laskeKyna();
		liikuta(loppuX, loppuY);
		nostaKyna();
	}

}
